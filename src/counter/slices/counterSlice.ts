import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../state/init/store";
import { fetchCount } from "../services/counterApi";

export enum CounterStatus {
  idle = "idle",
  loading = "loading",
  failed = "failed",
}

export interface CounterState {
  value: number;
  asyncDoubleCounter: number;
  asyncHalfCounter: number;
  status: CounterStatus;
}

const initialState: CounterState = {
  value: 0,
  asyncDoubleCounter: 0,
  asyncHalfCounter: 0,
  status: CounterStatus.idle,
};

const nameSlice = "counter";

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(`${nameSlice}/fetchCount`, async (amount: number) => {
  const response = await fetchCount(amount);
  // The value we return becomes the `fulfilled` action payload
  return response.data;
});

export const counterSlice = createSlice({
  name: nameSlice,
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: state => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: state => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
    // Example for an async action with a dispatcher
    asyncDoubleCounter: (state, action: PayloadAction<number>) => {
      state.asyncDoubleCounter = action.payload;
    },
    asyncHalfCounter: (state, action: PayloadAction<number>) => {
      state.asyncHalfCounter = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addCase(incrementAsync.pending, state => {
        state.status = CounterStatus.loading;
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = CounterStatus.idle;
        state.value += action.payload;
      });
  },
});

export const increment = counterSlice.actions.increment;
export const decrement = counterSlice.actions.decrement;
export const incrementByAmount = counterSlice.actions.incrementByAmount;
export const asyncDoubleCounter = counterSlice.actions.asyncDoubleCounter;
export const asyncHalfCounter = counterSlice.actions.asyncHalfCounter;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;

export default counterSlice.reducer;
